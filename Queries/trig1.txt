-- Update Saldo Trigger
CREATE OR REPLACE FUNCTION update_saldo_function()
RETURNS TRIGGER AS $$
BEGIN
    -- Subtract amount from the account of the sender
    UPDATE konto
    SET saldo = saldo - NEW.kwota
    WHERE nr_konta = NEW.nr_konta_nadawcy;

    -- Add amount to the account of the receiver
    UPDATE konto
    SET saldo = saldo + NEW.kwota
    WHERE nr_konta = NEW.nr_konta_odbiorcy;

    IF NEW.kwota < 0 THEN
        RAISE EXCEPTION 'Błędna kwota przelewu';
    END IF;

    IF (SELECT saldo FROM konto WHERE nr_konta = NEW.nr_konta_nadawcy) + NEW.kwota <= 0 THEN
        RAISE EXCEPTION 'za malo srodkow na koncie aby zrobic przelew';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM pg_trigger 
        WHERE tgname = 'update_saldo_trigger' 
        AND tgrelid = 'przelew'::regclass
    ) THEN
        CREATE TRIGGER update_saldo_trigger
        AFTER INSERT ON przelew
        FOR EACH ROW
        EXECUTE FUNCTION update_saldo_function();
    END IF;
END $$;

-- Update Saldo ATM Trigger
CREATE OR REPLACE FUNCTION update_saldo_atm_function()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE konto
    SET saldo = saldo + NEW.wplata_wyplata
    WHERE nr_konta = (SELECT nr_konta FROM karta WHERE nr_karty = NEW.nr_karty);

    IF (SELECT k.saldo
        FROM konto k
        JOIN karta ka ON k.nr_konta = ka.nr_konta
        WHERE ka.nr_karty = NEW.nr_karty) < 0 THEN
        RAISE EXCEPTION 'za malo srodkow na koncie aby wyplacic oczekiwana kwote';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM pg_trigger 
        WHERE tgname = 'update_saldo_atm_trigger' 
        AND tgrelid = 'transakcja'::regclass
    ) THEN
        CREATE TRIGGER update_saldo_atm_trigger
        AFTER INSERT ON transakcja
        FOR EACH ROW
        EXECUTE FUNCTION update_saldo_atm_function();
    END IF;
END $$;

-- Check Property Trigger
CREATE OR REPLACE FUNCTION check_property_function()
RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT oprocentowanie
        FROM typ_kredytu
        WHERE typ_kredytu_id = NEW.typ_kredytu_id) = 2 
        AND (SELECT mieszkanie
            FROM klient
            WHERE klient_id = NEW.klient_id) THEN
        RAISE EXCEPTION 'Nie możesz wziąć kredytu z oprocentowaniem 2, jeśli posiadasz mieszkanie';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM pg_trigger 
        WHERE tgname = 'check_property_trigger' 
        AND tgrelid = 'kredyt_detale'::regclass
    ) THEN
        CREATE TRIGGER check_property_trigger
        BEFORE INSERT ON kredyt_detale
        FOR EACH ROW
        EXECUTE FUNCTION check_property_function();
    END IF;
END $$;

-- Check Credit Trigger
CREATE OR REPLACE FUNCTION check_credit_function()
RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT COUNT(*)
        FROM kredyt_detale
        WHERE klient_id = NEW.klient_id) > 0 THEN
        RAISE EXCEPTION 'Klient posiada już kredyt - nie moze dostac kolejnego';
    END IF;

    IF NOT EXISTS (SELECT 1
        FROM klient
        WHERE klient_id = NEW.klient_id) THEN
        RAISE EXCEPTION 'Nie ma klienta o takim id';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM pg_trigger 
        WHERE tgname = 'check_credit_trigger' 
        AND tgrelid = 'kredyt_detale'::regclass
    ) THEN
        CREATE TRIGGER check_credit_trigger
        BEFORE INSERT ON kredyt_detale
        FOR EACH ROW
        EXECUTE FUNCTION check_credit_function();
    END IF;
END $$;
